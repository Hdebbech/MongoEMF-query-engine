/*
* generated by Xtext
*/
grammar InternalMongoSQL;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package org.eclipselabs.mongo.query.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipselabs.mongo.query.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import org.eclipselabs.mongo.query.services.MongoSQLGrammarAccess;

}

@parser::members {
 
 	private MongoSQLGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(MongoSQLGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getGroup()); }
(rule__Model__Group__0)
{ after(grammarAccess.getModelAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDatabase
entryRuleDatabase 
:
{ before(grammarAccess.getDatabaseRule()); }
	 ruleDatabase
{ after(grammarAccess.getDatabaseRule()); } 
	 EOF 
;

// Rule Database
ruleDatabase
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDatabaseAccess().getGroup()); }
(rule__Database__Group__0)
{ after(grammarAccess.getDatabaseAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleColumnList
entryRuleColumnList 
:
{ before(grammarAccess.getColumnListRule()); }
	 ruleColumnList
{ after(grammarAccess.getColumnListRule()); } 
	 EOF 
;

// Rule ColumnList
ruleColumnList
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getColumnListAccess().getAlternatives()); }
(rule__ColumnList__Alternatives)
{ after(grammarAccess.getColumnListAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleWhereEntry
entryRuleWhereEntry 
:
{ before(grammarAccess.getWhereEntryRule()); }
	 ruleWhereEntry
{ after(grammarAccess.getWhereEntryRule()); } 
	 EOF 
;

// Rule WhereEntry
ruleWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getWhereEntryAccess().getGroup()); }
(rule__WhereEntry__Group__0)
{ after(grammarAccess.getWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleAndWhereEntry
entryRuleAndWhereEntry 
:
{ before(grammarAccess.getAndWhereEntryRule()); }
	 ruleAndWhereEntry
{ after(grammarAccess.getAndWhereEntryRule()); } 
	 EOF 
;

// Rule AndWhereEntry
ruleAndWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup()); }
(rule__AndWhereEntry__Group__0)
{ after(grammarAccess.getAndWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleConcreteWhereEntry
entryRuleConcreteWhereEntry 
:
{ before(grammarAccess.getConcreteWhereEntryRule()); }
	 ruleConcreteWhereEntry
{ after(grammarAccess.getConcreteWhereEntryRule()); } 
	 EOF 
;

// Rule ConcreteWhereEntry
ruleConcreteWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getConcreteWhereEntryAccess().getAlternatives()); }
(rule__ConcreteWhereEntry__Alternatives)
{ after(grammarAccess.getConcreteWhereEntryAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleParWhereEntry
entryRuleParWhereEntry 
:
{ before(grammarAccess.getParWhereEntryRule()); }
	 ruleParWhereEntry
{ after(grammarAccess.getParWhereEntryRule()); } 
	 EOF 
;

// Rule ParWhereEntry
ruleParWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getParWhereEntryAccess().getGroup()); }
(rule__ParWhereEntry__Group__0)
{ after(grammarAccess.getParWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpressionWhereEntry
entryRuleExpressionWhereEntry 
:
{ before(grammarAccess.getExpressionWhereEntryRule()); }
	 ruleExpressionWhereEntry
{ after(grammarAccess.getExpressionWhereEntryRule()); } 
	 EOF 
;

// Rule ExpressionWhereEntry
ruleExpressionWhereEntry
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getGroup()); }
(rule__ExpressionWhereEntry__Group__0)
{ after(grammarAccess.getExpressionWhereEntryAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleExpression
entryRuleExpression 
:
{ before(grammarAccess.getExpressionRule()); }
	 ruleExpression
{ after(grammarAccess.getExpressionRule()); } 
	 EOF 
;

// Rule Expression
ruleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getExpressionAccess().getAlternatives()); }
(rule__Expression__Alternatives)
{ after(grammarAccess.getExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleReplacableValue
entryRuleReplacableValue 
:
{ before(grammarAccess.getReplacableValueRule()); }
	 ruleReplacableValue
{ after(grammarAccess.getReplacableValueRule()); } 
	 EOF 
;

// Rule ReplacableValue
ruleReplacableValue
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getReplacableValueAccess().getValueAssignment()); }
(rule__ReplacableValue__ValueAssignment)
{ after(grammarAccess.getReplacableValueAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDoubleExpression
entryRuleDoubleExpression 
:
{ before(grammarAccess.getDoubleExpressionRule()); }
	 ruleDoubleExpression
{ after(grammarAccess.getDoubleExpressionRule()); } 
	 EOF 
;

// Rule DoubleExpression
ruleDoubleExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDoubleExpressionAccess().getValueAssignment()); }
(rule__DoubleExpression__ValueAssignment)
{ after(grammarAccess.getDoubleExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleLongExpression
entryRuleLongExpression 
:
{ before(grammarAccess.getLongExpressionRule()); }
	 ruleLongExpression
{ after(grammarAccess.getLongExpressionRule()); } 
	 EOF 
;

// Rule LongExpression
ruleLongExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getLongExpressionAccess().getValueAssignment()); }
(rule__LongExpression__ValueAssignment)
{ after(grammarAccess.getLongExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleStringExpression
entryRuleStringExpression 
:
{ before(grammarAccess.getStringExpressionRule()); }
	 ruleStringExpression
{ after(grammarAccess.getStringExpressionRule()); } 
	 EOF 
;

// Rule StringExpression
ruleStringExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
(rule__StringExpression__ValueAssignment)
{ after(grammarAccess.getStringExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleNullExpression
entryRuleNullExpression 
:
{ before(grammarAccess.getNullExpressionRule()); }
	 ruleNullExpression
{ after(grammarAccess.getNullExpressionRule()); } 
	 EOF 
;

// Rule NullExpression
ruleNullExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
(rule__NullExpression__ValueAssignment)
{ after(grammarAccess.getNullExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleDateExpression
entryRuleDateExpression 
:
{ before(grammarAccess.getDateExpressionRule()); }
	 ruleDateExpression
{ after(grammarAccess.getDateExpressionRule()); } 
	 EOF 
;

// Rule DateExpression
ruleDateExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getDateExpressionAccess().getValueAssignment()); }
(rule__DateExpression__ValueAssignment)
{ after(grammarAccess.getDateExpressionAccess().getValueAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleBooleanExpression
entryRuleBooleanExpression 
:
{ before(grammarAccess.getBooleanExpressionRule()); }
	 ruleBooleanExpression
{ after(grammarAccess.getBooleanExpressionRule()); } 
	 EOF 
;

// Rule BooleanExpression
ruleBooleanExpression
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
(rule__BooleanExpression__Alternatives)
{ after(grammarAccess.getBooleanExpressionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Operator
ruleOperator
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getAlternatives()); }
(rule__Operator__Alternatives)
{ after(grammarAccess.getOperatorAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__ColumnList__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnListAccess().getGroup_0()); }
(rule__ColumnList__Group_0__0)
{ after(grammarAccess.getColumnListAccess().getGroup_0()); }
)

    |(
{ before(grammarAccess.getColumnListAccess().getAsteriskKeyword_1()); }

	'*' 

{ after(grammarAccess.getColumnListAccess().getAsteriskKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ConcreteWhereEntry__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0()); }
	ruleParWhereEntry
{ after(grammarAccess.getConcreteWhereEntryAccess().getParWhereEntryParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
	ruleExpressionWhereEntry
{ after(grammarAccess.getConcreteWhereEntryAccess().getExpressionWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Expression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0()); }
	ruleDoubleExpression
{ after(grammarAccess.getExpressionAccess().getDoubleExpressionParserRuleCall_0()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1()); }
	ruleLongExpression
{ after(grammarAccess.getExpressionAccess().getLongExpressionParserRuleCall_1()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2()); }
	ruleStringExpression
{ after(grammarAccess.getExpressionAccess().getStringExpressionParserRuleCall_2()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3()); }
	ruleNullExpression
{ after(grammarAccess.getExpressionAccess().getNullExpressionParserRuleCall_3()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4()); }
	ruleDateExpression
{ after(grammarAccess.getExpressionAccess().getDateExpressionParserRuleCall_4()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5()); }
	ruleBooleanExpression
{ after(grammarAccess.getExpressionAccess().getBooleanExpressionParserRuleCall_5()); }
)

    |(
{ before(grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6()); }
	ruleReplacableValue
{ after(grammarAccess.getExpressionAccess().getReplacableValueParserRuleCall_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_0()); }
(rule__BooleanExpression__TrueAssignment_0)
{ after(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_0()); }
)

    |(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_1()); }
(rule__BooleanExpression__TrueAssignment_1)
{ after(grammarAccess.getBooleanExpressionAccess().getTrueAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Operator__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
(	'<' 
)
{ after(grammarAccess.getOperatorAccess().getLessThenEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
(	'>' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterThenEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
(	'<=' 
)
{ after(grammarAccess.getOperatorAccess().getLessEqualEnumLiteralDeclaration_2()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
(	'>=' 
)
{ after(grammarAccess.getOperatorAccess().getGreaterEqualEnumLiteralDeclaration_3()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
(	'=' 
)
{ after(grammarAccess.getOperatorAccess().getEqualEnumLiteralDeclaration_4()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
(	'!=' 
)
{ after(grammarAccess.getOperatorAccess().getNotEqualEnumLiteralDeclaration_5()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6()); }
(	'like' 
)
{ after(grammarAccess.getOperatorAccess().getLikeEnumLiteralDeclaration_6()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7()); }
(	'not like' 
)
{ after(grammarAccess.getOperatorAccess().getNotLikeEnumLiteralDeclaration_7()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8()); }
(	'not in' 
)
{ after(grammarAccess.getOperatorAccess().getNotInEnumLiteralDeclaration_8()); }
)

    |(
{ before(grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9()); }
(	'in' 
)
{ after(grammarAccess.getOperatorAccess().getInEnumLiteralDeclaration_9()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Model__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getSELECTKeyword_0()); }

	'SELECT' 

{ after(grammarAccess.getModelAccess().getSELECTKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__1__Impl
	rule__Model__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAttrsAssignment_1()); }
(rule__Model__AttrsAssignment_1)
{ after(grammarAccess.getModelAccess().getAttrsAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__2__Impl
	rule__Model__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getFROMKeyword_2()); }

	'FROM' 

{ after(grammarAccess.getModelAccess().getFROMKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__3__Impl
	rule__Model__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDbAssignment_3()); }
(rule__Model__DbAssignment_3)
{ after(grammarAccess.getModelAccess().getDbAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getGroup_4()); }
(rule__Model__Group_4__0)?
{ after(grammarAccess.getModelAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Model__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__0__Impl
	rule__Model__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWHEREKeyword_4_0()); }

	'WHERE' 

{ after(grammarAccess.getModelAccess().getWHEREKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Model__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Model__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWhereEntryAssignment_4_1()); }
(rule__Model__WhereEntryAssignment_4_1)
{ after(grammarAccess.getModelAccess().getWhereEntryAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Database__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__0__Impl
	rule__Database__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getMongoKeyword_0()); }

	'mongo://' 

{ after(grammarAccess.getDatabaseAccess().getMongoKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__1__Impl
	rule__Database__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getUrlAssignment_1()); }
(rule__Database__UrlAssignment_1)
{ after(grammarAccess.getDatabaseAccess().getUrlAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__2__Impl
	rule__Database__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getGroup_2()); }
(rule__Database__Group_2__0)?
{ after(grammarAccess.getDatabaseAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__3__Impl
	rule__Database__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getSolidusKeyword_3()); }

	'/' 

{ after(grammarAccess.getDatabaseAccess().getSolidusKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__4__Impl
	rule__Database__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getDbNameAssignment_4()); }
(rule__Database__DbNameAssignment_4)
{ after(grammarAccess.getDatabaseAccess().getDbNameAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__5__Impl
	rule__Database__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getSolidusKeyword_5()); }

	'/' 

{ after(grammarAccess.getDatabaseAccess().getSolidusKeyword_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group__6
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group__6__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getNameAssignment_6()); }
(rule__Database__NameAssignment_6)
{ after(grammarAccess.getDatabaseAccess().getNameAssignment_6()); }
)

;
finally {
	restoreStackSize(stackSize);
}
















rule__Database__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group_2__0__Impl
	rule__Database__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getColonKeyword_2_0()); }

	':' 

{ after(grammarAccess.getDatabaseAccess().getColonKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Database__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Database__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Database__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getPortAssignment_2_1()); }
(rule__Database__PortAssignment_2_1)
{ after(grammarAccess.getDatabaseAccess().getPortAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnList__Group_0__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnList__Group_0__0__Impl
	rule__ColumnList__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnList__Group_0__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnListAccess().getIDTerminalRuleCall_0_0()); }
	RULE_ID
{ after(grammarAccess.getColumnListAccess().getIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnList__Group_0__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnList__Group_0__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnList__Group_0__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnListAccess().getGroup_0_1()); }
(rule__ColumnList__Group_0_1__0)*
{ after(grammarAccess.getColumnListAccess().getGroup_0_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ColumnList__Group_0_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnList__Group_0_1__0__Impl
	rule__ColumnList__Group_0_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnList__Group_0_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnListAccess().getCommaKeyword_0_1_0()); }

	',' 

{ after(grammarAccess.getColumnListAccess().getCommaKeyword_0_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ColumnList__Group_0_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ColumnList__Group_0_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ColumnList__Group_0_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getColumnListAccess().getIDTerminalRuleCall_0_1_1()); }
	RULE_ID
{ after(grammarAccess.getColumnListAccess().getIDTerminalRuleCall_0_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group__0__Impl
	rule__WhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0()); }
	ruleAndWhereEntry
{ after(grammarAccess.getWhereEntryAccess().getAndWhereEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1()); }
(rule__WhereEntry__Group_1__0)?
{ after(grammarAccess.getWhereEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1__0__Impl
	rule__WhereEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getWhereEntryAccess().getOrWhereEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
(rule__WhereEntry__Group_1_1__0)
{ after(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
(rule__WhereEntry__Group_1_1__0)*
{ after(grammarAccess.getWhereEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__WhereEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1_1__0__Impl
	rule__WhereEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0()); }

	'OR' 

{ after(grammarAccess.getWhereEntryAccess().getORKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__WhereEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__WhereEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__WhereEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getWhereEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group__0__Impl
	rule__AndWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0()); }
	ruleConcreteWhereEntry
{ after(grammarAccess.getAndWhereEntryAccess().getConcreteWhereEntryParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1()); }
(rule__AndWhereEntry__Group_1__0)?
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1__0__Impl
	rule__AndWhereEntry__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0()); }
(

)
{ after(grammarAccess.getAndWhereEntryAccess().getAndWhereEntryEntriesAction_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
(rule__AndWhereEntry__Group_1_1__0)
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
)
(
{ before(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
(rule__AndWhereEntry__Group_1_1__0)*
{ after(grammarAccess.getAndWhereEntryAccess().getGroup_1_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}






rule__AndWhereEntry__Group_1_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1_1__0__Impl
	rule__AndWhereEntry__Group_1_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0()); }

	'AND' 

{ after(grammarAccess.getAndWhereEntryAccess().getANDKeyword_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__AndWhereEntry__Group_1_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__AndWhereEntry__Group_1_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__Group_1_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1()); }
(rule__AndWhereEntry__EntriesAssignment_1_1_1)
{ after(grammarAccess.getAndWhereEntryAccess().getEntriesAssignment_1_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__ParWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__0__Impl
	rule__ParWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0()); }

	'(' 

{ after(grammarAccess.getParWhereEntryAccess().getLeftParenthesisKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__1__Impl
	rule__ParWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1()); }
	ruleWhereEntry
{ after(grammarAccess.getParWhereEntryAccess().getWhereEntryParserRuleCall_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ParWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ParWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ParWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2()); }

	')' 

{ after(grammarAccess.getParWhereEntryAccess().getRightParenthesisKeyword_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__ExpressionWhereEntry__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionWhereEntry__Group__0__Impl
	rule__ExpressionWhereEntry__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getNameAssignment_0()); }
(rule__ExpressionWhereEntry__NameAssignment_0)
{ after(grammarAccess.getExpressionWhereEntryAccess().getNameAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionWhereEntry__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionWhereEntry__Group__1__Impl
	rule__ExpressionWhereEntry__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getOperatorAssignment_1()); }
(rule__ExpressionWhereEntry__OperatorAssignment_1)
{ after(grammarAccess.getExpressionWhereEntryAccess().getOperatorAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__ExpressionWhereEntry__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__ExpressionWhereEntry__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getRhsAssignment_2()); }
(rule__ExpressionWhereEntry__RhsAssignment_2)
{ after(grammarAccess.getExpressionWhereEntryAccess().getRhsAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Model__AttrsAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getAttrsColumnListParserRuleCall_1_0()); }
	ruleColumnList{ after(grammarAccess.getModelAccess().getAttrsColumnListParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__DbAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getDbDatabaseParserRuleCall_3_0()); }
	ruleDatabase{ after(grammarAccess.getModelAccess().getDbDatabaseParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Model__WhereEntryAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0()); }
	ruleWhereEntry{ after(grammarAccess.getModelAccess().getWhereEntryWhereEntryParserRuleCall_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__UrlAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getUrlIDTerminalRuleCall_1_0()); }
	RULE_ID{ after(grammarAccess.getDatabaseAccess().getUrlIDTerminalRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__PortAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getPortSINGED_LONGTerminalRuleCall_2_1_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getDatabaseAccess().getPortSINGED_LONGTerminalRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__DbNameAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_4_0()); }
	RULE_ID{ after(grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Database__NameAssignment_6
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_6_0()); }
	RULE_ID{ after(grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_6_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__WhereEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0()); }
	ruleAndWhereEntry{ after(grammarAccess.getWhereEntryAccess().getEntriesAndWhereEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__AndWhereEntry__EntriesAssignment_1_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0()); }
	ruleConcreteWhereEntry{ after(grammarAccess.getAndWhereEntryAccess().getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__NameAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
	RULE_ID{ after(grammarAccess.getExpressionWhereEntryAccess().getNameIDTerminalRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__OperatorAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0()); }
	ruleOperator{ after(grammarAccess.getExpressionWhereEntryAccess().getOperatorOperatorEnumRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ExpressionWhereEntry__RhsAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0()); }
	ruleExpression{ after(grammarAccess.getExpressionWhereEntryAccess().getRhsExpressionParserRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__ReplacableValue__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
(
{ before(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }

	'?' 

{ after(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
)

{ after(grammarAccess.getReplacableValueAccess().getValueQuestionMarkKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DoubleExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0()); }
	RULE_SIGNED_DOUBLE{ after(grammarAccess.getDoubleExpressionAccess().getValueSIGNED_DOUBLETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__LongExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0()); }
	RULE_SINGED_LONG{ after(grammarAccess.getLongExpressionAccess().getValueSINGED_LONGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__StringExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
	RULE_STRING{ after(grammarAccess.getStringExpressionAccess().getValueSTRINGTerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__NullExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
(
{ before(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }

	'null' 

{ after(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
)

{ after(grammarAccess.getNullExpressionAccess().getValueNullKeyword_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__DateExpression__ValueAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0()); }
	RULE_DATE{ after(grammarAccess.getDateExpressionAccess().getValueDATETerminalRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__TrueAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }

	'true' 

{ after(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
)

{ after(grammarAccess.getBooleanExpressionAccess().getTrueTrueKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__BooleanExpression__TrueAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
(
{ before(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }

	'false' 

{ after(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
)

{ after(grammarAccess.getBooleanExpressionAccess().getTrueFalseKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_SINGED_LONG : '-'? ('0'..'9')+;

RULE_DATE : '0'..'9' '0'..'9' '0'..'9' '0'..'9' '-' '0'..'1' '0'..'9' '-' '0'..'3' '0'..'9';

RULE_SIGNED_DOUBLE : '-'? ('0'..'9')+ ('.' ('0'..'9')+)?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;


