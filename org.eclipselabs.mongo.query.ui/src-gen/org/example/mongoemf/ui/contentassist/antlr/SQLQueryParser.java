/*
* generated by Xtext
*/
package org.example.mongoemf.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import org.example.mongoemf.services.SQLQueryGrammarAccess;

public class SQLQueryParser extends AbstractContentAssistParser {
	
	@Inject
	private SQLQueryGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected org.example.mongoemf.ui.contentassist.antlr.internal.InternalSQLQueryParser createParser() {
		org.example.mongoemf.ui.contentassist.antlr.internal.InternalSQLQueryParser result = new org.example.mongoemf.ui.contentassist.antlr.internal.InternalSQLQueryParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getColumnListAccess().getAlternatives(), "rule__ColumnList__Alternatives");
					put(grammarAccess.getConjunctionAccess().getAlternatives(), "rule__Conjunction__Alternatives");
					put(grammarAccess.getCOMPAREAccess().getAlternatives(), "rule__COMPARE__Alternatives");
					put(grammarAccess.getVALUEAccess().getAlternatives(), "rule__VALUE__Alternatives");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getDatabaseAccess().getGroup(), "rule__Database__Group__0");
					put(grammarAccess.getDatabaseAccess().getGroup_2(), "rule__Database__Group_2__0");
					put(grammarAccess.getColumnListAccess().getGroup_0(), "rule__ColumnList__Group_0__0");
					put(grammarAccess.getColumnListAccess().getGroup_0_1(), "rule__ColumnList__Group_0_1__0");
					put(grammarAccess.getQueryConditionAccess().getGroup(), "rule__QueryCondition__Group__0");
					put(grammarAccess.getFollowConditionAccess().getGroup(), "rule__FollowCondition__Group__0");
					put(grammarAccess.getConditionAccess().getGroup(), "rule__Condition__Group__0");
					put(grammarAccess.getModelAccess().getAttrsAssignment_1(), "rule__Model__AttrsAssignment_1");
					put(grammarAccess.getModelAccess().getDbAssignment_3(), "rule__Model__DbAssignment_3");
					put(grammarAccess.getModelAccess().getQueryAssignment_4(), "rule__Model__QueryAssignment_4");
					put(grammarAccess.getDatabaseAccess().getUrlAssignment_1(), "rule__Database__UrlAssignment_1");
					put(grammarAccess.getDatabaseAccess().getPortAssignment_2_1(), "rule__Database__PortAssignment_2_1");
					put(grammarAccess.getDatabaseAccess().getDbNameAssignment_4(), "rule__Database__DbNameAssignment_4");
					put(grammarAccess.getDatabaseAccess().getNameAssignment_6(), "rule__Database__NameAssignment_6");
					put(grammarAccess.getQueryConditionAccess().getStartcondAssignment_1(), "rule__QueryCondition__StartcondAssignment_1");
					put(grammarAccess.getQueryConditionAccess().getFollowcondAssignment_2(), "rule__QueryCondition__FollowcondAssignment_2");
					put(grammarAccess.getFollowConditionAccess().getConjunctionAssignment_0(), "rule__FollowCondition__ConjunctionAssignment_0");
					put(grammarAccess.getFollowConditionAccess().getCondAssignment_1(), "rule__FollowCondition__CondAssignment_1");
					put(grammarAccess.getConditionAccess().getNameAssignment_0(), "rule__Condition__NameAssignment_0");
					put(grammarAccess.getConditionAccess().getCompAssignment_1(), "rule__Condition__CompAssignment_1");
					put(grammarAccess.getConditionAccess().getValueAssignment_2(), "rule__Condition__ValueAssignment_2");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			org.example.mongoemf.ui.contentassist.antlr.internal.InternalSQLQueryParser typedParser = (org.example.mongoemf.ui.contentassist.antlr.internal.InternalSQLQueryParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public SQLQueryGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(SQLQueryGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
