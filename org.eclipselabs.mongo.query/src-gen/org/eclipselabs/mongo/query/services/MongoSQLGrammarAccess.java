/*
* generated by Xtext
*/

package org.eclipselabs.mongo.query.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;


@Singleton
public class MongoSQLGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttrsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrsColumnListParserRuleCall_1_0 = (RuleCall)cAttrsAssignment_1.eContents().get(0);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDbDatabaseParserRuleCall_3_0 = (RuleCall)cDbAssignment_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cWHEREKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cWhereEntryAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final RuleCall cWhereEntryWhereEntryParserRuleCall_4_1_0 = (RuleCall)cWhereEntryAssignment_4_1.eContents().get(0);
		
		//Model:
		//	"SELECT" attrs=ColumnList "FROM" db=Database ("WHERE" whereEntry=WhereEntry)?;
		public ParserRule getRule() { return rule; }

		//"SELECT" attrs=ColumnList "FROM" db=Database ("WHERE" whereEntry=WhereEntry)?
		public Group getGroup() { return cGroup; }

		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }

		//attrs=ColumnList
		public Assignment getAttrsAssignment_1() { return cAttrsAssignment_1; }

		//ColumnList
		public RuleCall getAttrsColumnListParserRuleCall_1_0() { return cAttrsColumnListParserRuleCall_1_0; }

		//"FROM"
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }

		//db=Database
		public Assignment getDbAssignment_3() { return cDbAssignment_3; }

		//Database
		public RuleCall getDbDatabaseParserRuleCall_3_0() { return cDbDatabaseParserRuleCall_3_0; }

		//("WHERE" whereEntry=WhereEntry)?
		public Group getGroup_4() { return cGroup_4; }

		//"WHERE"
		public Keyword getWHEREKeyword_4_0() { return cWHEREKeyword_4_0; }

		//whereEntry=WhereEntry
		public Assignment getWhereEntryAssignment_4_1() { return cWhereEntryAssignment_4_1; }

		//WhereEntry
		public RuleCall getWhereEntryWhereEntryParserRuleCall_4_1_0() { return cWhereEntryWhereEntryParserRuleCall_4_1_0; }
	}

	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMongoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlIDTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortSINGED_LONGTerminalRuleCall_2_1_0 = (RuleCall)cPortAssignment_2_1.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDbNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDbNameIDTerminalRuleCall_4_0 = (RuleCall)cDbNameAssignment_4.eContents().get(0);
		private final Keyword cSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		
		//Database:
		//	"mongo://" url=ID (":" port=SINGED_LONG)? "/" dbName=ID "/" name=ID;
		public ParserRule getRule() { return rule; }

		//"mongo://" url=ID (":" port=SINGED_LONG)? "/" dbName=ID "/" name=ID
		public Group getGroup() { return cGroup; }

		//"mongo://"
		public Keyword getMongoKeyword_0() { return cMongoKeyword_0; }

		//url=ID
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//ID
		public RuleCall getUrlIDTerminalRuleCall_1_0() { return cUrlIDTerminalRuleCall_1_0; }

		//(":" port=SINGED_LONG)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//port=SINGED_LONG
		public Assignment getPortAssignment_2_1() { return cPortAssignment_2_1; }

		//SINGED_LONG
		public RuleCall getPortSINGED_LONGTerminalRuleCall_2_1_0() { return cPortSINGED_LONGTerminalRuleCall_2_1_0; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//dbName=ID
		public Assignment getDbNameAssignment_4() { return cDbNameAssignment_4; }

		//ID
		public RuleCall getDbNameIDTerminalRuleCall_4_0() { return cDbNameIDTerminalRuleCall_4_0; }

		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
	}

	public class ColumnListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ColumnList:
		//	ID ("," ID)* | "*";
		public ParserRule getRule() { return rule; }

		//ID ("," ID)* | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID ("," ID)*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//("," ID)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class WhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cAndWhereEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cOrWhereEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cORKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesAndWhereEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//WhereEntry:
		//	AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?;
		public ParserRule getRule() { return rule; }

		//AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?
		public Group getGroup() { return cGroup; }

		//AndWhereEntry
		public RuleCall getAndWhereEntryParserRuleCall_0() { return cAndWhereEntryParserRuleCall_0; }

		//({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{OrWhereEntry.entries+=current}
		public Action getOrWhereEntryEntriesAction_1_0() { return cOrWhereEntryEntriesAction_1_0; }

		//("OR" entries+=AndWhereEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"OR"
		public Keyword getORKeyword_1_1_0() { return cORKeyword_1_1_0; }

		//entries+=AndWhereEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//AndWhereEntry
		public RuleCall getEntriesAndWhereEntryParserRuleCall_1_1_1_0() { return cEntriesAndWhereEntryParserRuleCall_1_1_1_0; }
	}

	public class AndWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AndWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cConcreteWhereEntryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAndWhereEntryEntriesAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Keyword cANDKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Assignment cEntriesAssignment_1_1_1 = (Assignment)cGroup_1_1.eContents().get(1);
		private final RuleCall cEntriesConcreteWhereEntryParserRuleCall_1_1_1_0 = (RuleCall)cEntriesAssignment_1_1_1.eContents().get(0);
		
		//AndWhereEntry returns WhereEntry:
		//	ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?;
		public ParserRule getRule() { return rule; }

		//ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?
		public Group getGroup() { return cGroup; }

		//ConcreteWhereEntry
		public RuleCall getConcreteWhereEntryParserRuleCall_0() { return cConcreteWhereEntryParserRuleCall_0; }

		//({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?
		public Group getGroup_1() { return cGroup_1; }

		//{AndWhereEntry.entries+=current}
		public Action getAndWhereEntryEntriesAction_1_0() { return cAndWhereEntryEntriesAction_1_0; }

		//("AND" entries+=ConcreteWhereEntry)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"AND"
		public Keyword getANDKeyword_1_1_0() { return cANDKeyword_1_1_0; }

		//entries+=ConcreteWhereEntry
		public Assignment getEntriesAssignment_1_1_1() { return cEntriesAssignment_1_1_1; }

		//ConcreteWhereEntry
		public RuleCall getEntriesConcreteWhereEntryParserRuleCall_1_1_1_0() { return cEntriesConcreteWhereEntryParserRuleCall_1_1_1_0; }
	}

	public class ConcreteWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ConcreteWhereEntry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cParWhereEntryParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExpressionWhereEntryParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ConcreteWhereEntry returns WhereEntry:
		//	ParWhereEntry | ExpressionWhereEntry;
		public ParserRule getRule() { return rule; }

		//ParWhereEntry | ExpressionWhereEntry
		public Alternatives getAlternatives() { return cAlternatives; }

		//ParWhereEntry
		public RuleCall getParWhereEntryParserRuleCall_0() { return cParWhereEntryParserRuleCall_0; }

		//ExpressionWhereEntry
		public RuleCall getExpressionWhereEntryParserRuleCall_1() { return cExpressionWhereEntryParserRuleCall_1; }
	}

	public class ParWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cWhereEntryParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//ParWhereEntry returns WhereEntry:
		//	"(" WhereEntry ")";
		public ParserRule getRule() { return rule; }

		//"(" WhereEntry ")"
		public Group getGroup() { return cGroup; }

		//"("
		public Keyword getLeftParenthesisKeyword_0() { return cLeftParenthesisKeyword_0; }

		//WhereEntry
		public RuleCall getWhereEntryParserRuleCall_1() { return cWhereEntryParserRuleCall_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2() { return cRightParenthesisKeyword_2; }
	}

	public class ExpressionWhereEntryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExpressionWhereEntry");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cOperatorOperatorEnumRuleCall_1_0 = (RuleCall)cOperatorAssignment_1.eContents().get(0);
		private final Assignment cRhsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cRhsExpressionParserRuleCall_2_0 = (RuleCall)cRhsAssignment_2.eContents().get(0);
		
		//ExpressionWhereEntry:
		//	name=ID operator=Operator rhs=Expression;
		public ParserRule getRule() { return rule; }

		//name=ID operator=Operator rhs=Expression
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//operator=Operator
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }

		//Operator
		public RuleCall getOperatorOperatorEnumRuleCall_1_0() { return cOperatorOperatorEnumRuleCall_1_0; }

		//rhs=Expression
		public Assignment getRhsAssignment_2() { return cRhsAssignment_2; }

		//Expression
		public RuleCall getRhsExpressionParserRuleCall_2_0() { return cRhsExpressionParserRuleCall_2_0; }
	}

	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Expression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDoubleExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cLongExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cStringExpressionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cNullExpressionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cDateExpressionParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cBooleanExpressionParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cReplacableValueParserRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//Expression:
		//	DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
		//	ReplacableValue;
		public ParserRule getRule() { return rule; }

		//DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
		//ReplacableValue
		public Alternatives getAlternatives() { return cAlternatives; }

		//DoubleExpression
		public RuleCall getDoubleExpressionParserRuleCall_0() { return cDoubleExpressionParserRuleCall_0; }

		//LongExpression
		public RuleCall getLongExpressionParserRuleCall_1() { return cLongExpressionParserRuleCall_1; }

		//StringExpression
		public RuleCall getStringExpressionParserRuleCall_2() { return cStringExpressionParserRuleCall_2; }

		//NullExpression
		public RuleCall getNullExpressionParserRuleCall_3() { return cNullExpressionParserRuleCall_3; }

		//DateExpression
		public RuleCall getDateExpressionParserRuleCall_4() { return cDateExpressionParserRuleCall_4; }

		//BooleanExpression
		public RuleCall getBooleanExpressionParserRuleCall_5() { return cBooleanExpressionParserRuleCall_5; }

		//ReplacableValue
		public RuleCall getReplacableValueParserRuleCall_6() { return cReplacableValueParserRuleCall_6; }
	}

	public class ReplacableValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ReplacableValue");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueQuestionMarkKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//ReplacableValue:
		//	value="?";
		public ParserRule getRule() { return rule; }

		//value="?"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"?"
		public Keyword getValueQuestionMarkKeyword_0() { return cValueQuestionMarkKeyword_0; }
	}

	public class DoubleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DoubleExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSIGNED_DOUBLETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DoubleExpression:
		//	value=SIGNED_DOUBLE;
		public ParserRule getRule() { return rule; }

		//value=SIGNED_DOUBLE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SIGNED_DOUBLE
		public RuleCall getValueSIGNED_DOUBLETerminalRuleCall_0() { return cValueSIGNED_DOUBLETerminalRuleCall_0; }
	}

	public class LongExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "LongExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSINGED_LONGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//LongExpression:
		//	value=SINGED_LONG;
		public ParserRule getRule() { return rule; }

		//value=SINGED_LONG
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SINGED_LONG
		public RuleCall getValueSINGED_LONGTerminalRuleCall_0() { return cValueSINGED_LONGTerminalRuleCall_0; }
	}

	public class StringExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StringExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSTRINGTerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//StringExpression:
		//	value=STRING;
		public ParserRule getRule() { return rule; }

		//value=STRING
		public Assignment getValueAssignment() { return cValueAssignment; }

		//STRING
		public RuleCall getValueSTRINGTerminalRuleCall_0() { return cValueSTRINGTerminalRuleCall_0; }
	}

	public class NullExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NullExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final Keyword cValueNullKeyword_0 = (Keyword)cValueAssignment.eContents().get(0);
		
		//NullExpression:
		//	value="null";
		public ParserRule getRule() { return rule; }

		//value="null"
		public Assignment getValueAssignment() { return cValueAssignment; }

		//"null"
		public Keyword getValueNullKeyword_0() { return cValueNullKeyword_0; }
	}

	public class DateExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DateExpression");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueDATETerminalRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//DateExpression:
		//	value=DATE;
		public ParserRule getRule() { return rule; }

		//value=DATE
		public Assignment getValueAssignment() { return cValueAssignment; }

		//DATE
		public RuleCall getValueDATETerminalRuleCall_0() { return cValueDATETerminalRuleCall_0; }
	}

	public class BooleanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BooleanExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTrueAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final Keyword cTrueTrueKeyword_0_0 = (Keyword)cTrueAssignment_0.eContents().get(0);
		private final Assignment cTrueAssignment_1 = (Assignment)cAlternatives.eContents().get(1);
		private final Keyword cTrueFalseKeyword_1_0 = (Keyword)cTrueAssignment_1.eContents().get(0);
		
		//BooleanExpression:
		//	true="true" | true="false";
		public ParserRule getRule() { return rule; }

		//true="true" | true="false"
		public Alternatives getAlternatives() { return cAlternatives; }

		//true="true"
		public Assignment getTrueAssignment_0() { return cTrueAssignment_0; }

		//"true"
		public Keyword getTrueTrueKeyword_0_0() { return cTrueTrueKeyword_0_0; }

		//true="false"
		public Assignment getTrueAssignment_1() { return cTrueAssignment_1; }

		//"false"
		public Keyword getTrueFalseKeyword_1_0() { return cTrueFalseKeyword_1_0; }
	}
	
	
	public class OperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Operator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLessThenEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLessThenLessThanSignKeyword_0_0 = (Keyword)cLessThenEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThenEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cGreaterThenGreaterThanSignKeyword_1_0 = (Keyword)cGreaterThenEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessEqualEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessEqualLessThanSignEqualsSignKeyword_2_0 = (Keyword)cLessEqualEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterEqualEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0 = (Keyword)cGreaterEqualEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cEqualEqualsSignKeyword_4_0 = (Keyword)cEqualEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_5_0 = (Keyword)cNotEqualEnumLiteralDeclaration_5.eContents().get(0);
		private final EnumLiteralDeclaration cLikeEnumLiteralDeclaration_6 = (EnumLiteralDeclaration)cAlternatives.eContents().get(6);
		private final Keyword cLikeLikeKeyword_6_0 = (Keyword)cLikeEnumLiteralDeclaration_6.eContents().get(0);
		private final EnumLiteralDeclaration cNotLikeEnumLiteralDeclaration_7 = (EnumLiteralDeclaration)cAlternatives.eContents().get(7);
		private final Keyword cNotLikeNotLikeKeyword_7_0 = (Keyword)cNotLikeEnumLiteralDeclaration_7.eContents().get(0);
		private final EnumLiteralDeclaration cNotInEnumLiteralDeclaration_8 = (EnumLiteralDeclaration)cAlternatives.eContents().get(8);
		private final Keyword cNotInNotInKeyword_8_0 = (Keyword)cNotInEnumLiteralDeclaration_8.eContents().get(0);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_9 = (EnumLiteralDeclaration)cAlternatives.eContents().get(9);
		private final Keyword cInInKeyword_9_0 = (Keyword)cInEnumLiteralDeclaration_9.eContents().get(0);
		
		//enum Operator:
		//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | like |
		//	notLike="not like" | notIn="not in" | in;
		public EnumRule getRule() { return rule; }

		//lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | like |
		//notLike="not like" | notIn="not in" | in
		public Alternatives getAlternatives() { return cAlternatives; }

		//lessThen="<"
		public EnumLiteralDeclaration getLessThenEnumLiteralDeclaration_0() { return cLessThenEnumLiteralDeclaration_0; }

		//"<"
		public Keyword getLessThenLessThanSignKeyword_0_0() { return cLessThenLessThanSignKeyword_0_0; }

		//greaterThen=">"
		public EnumLiteralDeclaration getGreaterThenEnumLiteralDeclaration_1() { return cGreaterThenEnumLiteralDeclaration_1; }

		//">"
		public Keyword getGreaterThenGreaterThanSignKeyword_1_0() { return cGreaterThenGreaterThanSignKeyword_1_0; }

		//lessEqual="<="
		public EnumLiteralDeclaration getLessEqualEnumLiteralDeclaration_2() { return cLessEqualEnumLiteralDeclaration_2; }

		//"<="
		public Keyword getLessEqualLessThanSignEqualsSignKeyword_2_0() { return cLessEqualLessThanSignEqualsSignKeyword_2_0; }

		//greaterEqual=">="
		public EnumLiteralDeclaration getGreaterEqualEnumLiteralDeclaration_3() { return cGreaterEqualEnumLiteralDeclaration_3; }

		//">="
		public Keyword getGreaterEqualGreaterThanSignEqualsSignKeyword_3_0() { return cGreaterEqualGreaterThanSignEqualsSignKeyword_3_0; }

		//equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_4() { return cEqualEnumLiteralDeclaration_4; }

		//"="
		public Keyword getEqualEqualsSignKeyword_4_0() { return cEqualEqualsSignKeyword_4_0; }

		//notEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_5() { return cNotEqualEnumLiteralDeclaration_5; }

		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_5_0() { return cNotEqualExclamationMarkEqualsSignKeyword_5_0; }

		//like
		public EnumLiteralDeclaration getLikeEnumLiteralDeclaration_6() { return cLikeEnumLiteralDeclaration_6; }

		//"like"
		public Keyword getLikeLikeKeyword_6_0() { return cLikeLikeKeyword_6_0; }

		//notLike="not like"
		public EnumLiteralDeclaration getNotLikeEnumLiteralDeclaration_7() { return cNotLikeEnumLiteralDeclaration_7; }

		//"not like"
		public Keyword getNotLikeNotLikeKeyword_7_0() { return cNotLikeNotLikeKeyword_7_0; }

		//notIn="not in"
		public EnumLiteralDeclaration getNotInEnumLiteralDeclaration_8() { return cNotInEnumLiteralDeclaration_8; }

		//"not in"
		public Keyword getNotInNotInKeyword_8_0() { return cNotInNotInKeyword_8_0; }

		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_9() { return cInEnumLiteralDeclaration_9; }

		//"in"
		public Keyword getInInKeyword_9_0() { return cInInKeyword_9_0; }
	}
	
	private ModelElements pModel;
	private DatabaseElements pDatabase;
	private ColumnListElements pColumnList;
	private WhereEntryElements pWhereEntry;
	private AndWhereEntryElements pAndWhereEntry;
	private ConcreteWhereEntryElements pConcreteWhereEntry;
	private ParWhereEntryElements pParWhereEntry;
	private ExpressionWhereEntryElements pExpressionWhereEntry;
	private ExpressionElements pExpression;
	private ReplacableValueElements pReplacableValue;
	private DoubleExpressionElements pDoubleExpression;
	private LongExpressionElements pLongExpression;
	private StringExpressionElements pStringExpression;
	private NullExpressionElements pNullExpression;
	private DateExpressionElements pDateExpression;
	private BooleanExpressionElements pBooleanExpression;
	private OperatorElements unknownRuleOperator;
	private TerminalRule tSINGED_LONG;
	private TerminalRule tDATE;
	private TerminalRule tSIGNED_DOUBLE;
	private TerminalRule tID;
	private TerminalRule tSTRING;
	private TerminalRule tML_COMMENT;
	private TerminalRule tSL_COMMENT;
	private TerminalRule tWS;
	
	private final GrammarProvider grammarProvider;

	@Inject
	public MongoSQLGrammarAccess(GrammarProvider grammarProvider) {
		this.grammarProvider = grammarProvider;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	
	//Model:
	//	"SELECT" attrs=ColumnList "FROM" db=Database ("WHERE" whereEntry=WhereEntry)?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Database:
	//	"mongo://" url=ID (":" port=SINGED_LONG)? "/" dbName=ID "/" name=ID;
	public DatabaseElements getDatabaseAccess() {
		return (pDatabase != null) ? pDatabase : (pDatabase = new DatabaseElements());
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}

	//ColumnList:
	//	ID ("," ID)* | "*";
	public ColumnListElements getColumnListAccess() {
		return (pColumnList != null) ? pColumnList : (pColumnList = new ColumnListElements());
	}
	
	public ParserRule getColumnListRule() {
		return getColumnListAccess().getRule();
	}

	//WhereEntry:
	//	AndWhereEntry ({OrWhereEntry.entries+=current} ("OR" entries+=AndWhereEntry)+)?;
	public WhereEntryElements getWhereEntryAccess() {
		return (pWhereEntry != null) ? pWhereEntry : (pWhereEntry = new WhereEntryElements());
	}
	
	public ParserRule getWhereEntryRule() {
		return getWhereEntryAccess().getRule();
	}

	//AndWhereEntry returns WhereEntry:
	//	ConcreteWhereEntry ({AndWhereEntry.entries+=current} ("AND" entries+=ConcreteWhereEntry)+)?;
	public AndWhereEntryElements getAndWhereEntryAccess() {
		return (pAndWhereEntry != null) ? pAndWhereEntry : (pAndWhereEntry = new AndWhereEntryElements());
	}
	
	public ParserRule getAndWhereEntryRule() {
		return getAndWhereEntryAccess().getRule();
	}

	//ConcreteWhereEntry returns WhereEntry:
	//	ParWhereEntry | ExpressionWhereEntry;
	public ConcreteWhereEntryElements getConcreteWhereEntryAccess() {
		return (pConcreteWhereEntry != null) ? pConcreteWhereEntry : (pConcreteWhereEntry = new ConcreteWhereEntryElements());
	}
	
	public ParserRule getConcreteWhereEntryRule() {
		return getConcreteWhereEntryAccess().getRule();
	}

	//ParWhereEntry returns WhereEntry:
	//	"(" WhereEntry ")";
	public ParWhereEntryElements getParWhereEntryAccess() {
		return (pParWhereEntry != null) ? pParWhereEntry : (pParWhereEntry = new ParWhereEntryElements());
	}
	
	public ParserRule getParWhereEntryRule() {
		return getParWhereEntryAccess().getRule();
	}

	//ExpressionWhereEntry:
	//	name=ID operator=Operator rhs=Expression;
	public ExpressionWhereEntryElements getExpressionWhereEntryAccess() {
		return (pExpressionWhereEntry != null) ? pExpressionWhereEntry : (pExpressionWhereEntry = new ExpressionWhereEntryElements());
	}
	
	public ParserRule getExpressionWhereEntryRule() {
		return getExpressionWhereEntryAccess().getRule();
	}

	//Expression:
	//	DoubleExpression | LongExpression | StringExpression | NullExpression | DateExpression | BooleanExpression |
	//	ReplacableValue;
	public ExpressionElements getExpressionAccess() {
		return (pExpression != null) ? pExpression : (pExpression = new ExpressionElements());
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}

	//ReplacableValue:
	//	value="?";
	public ReplacableValueElements getReplacableValueAccess() {
		return (pReplacableValue != null) ? pReplacableValue : (pReplacableValue = new ReplacableValueElements());
	}
	
	public ParserRule getReplacableValueRule() {
		return getReplacableValueAccess().getRule();
	}

	//DoubleExpression:
	//	value=SIGNED_DOUBLE;
	public DoubleExpressionElements getDoubleExpressionAccess() {
		return (pDoubleExpression != null) ? pDoubleExpression : (pDoubleExpression = new DoubleExpressionElements());
	}
	
	public ParserRule getDoubleExpressionRule() {
		return getDoubleExpressionAccess().getRule();
	}

	//LongExpression:
	//	value=SINGED_LONG;
	public LongExpressionElements getLongExpressionAccess() {
		return (pLongExpression != null) ? pLongExpression : (pLongExpression = new LongExpressionElements());
	}
	
	public ParserRule getLongExpressionRule() {
		return getLongExpressionAccess().getRule();
	}

	//StringExpression:
	//	value=STRING;
	public StringExpressionElements getStringExpressionAccess() {
		return (pStringExpression != null) ? pStringExpression : (pStringExpression = new StringExpressionElements());
	}
	
	public ParserRule getStringExpressionRule() {
		return getStringExpressionAccess().getRule();
	}

	//NullExpression:
	//	value="null";
	public NullExpressionElements getNullExpressionAccess() {
		return (pNullExpression != null) ? pNullExpression : (pNullExpression = new NullExpressionElements());
	}
	
	public ParserRule getNullExpressionRule() {
		return getNullExpressionAccess().getRule();
	}

	//DateExpression:
	//	value=DATE;
	public DateExpressionElements getDateExpressionAccess() {
		return (pDateExpression != null) ? pDateExpression : (pDateExpression = new DateExpressionElements());
	}
	
	public ParserRule getDateExpressionRule() {
		return getDateExpressionAccess().getRule();
	}

	//BooleanExpression:
	//	true="true" | true="false";
	public BooleanExpressionElements getBooleanExpressionAccess() {
		return (pBooleanExpression != null) ? pBooleanExpression : (pBooleanExpression = new BooleanExpressionElements());
	}
	
	public ParserRule getBooleanExpressionRule() {
		return getBooleanExpressionAccess().getRule();
	}

	//enum Operator:
	//	lessThen="<" | greaterThen=">" | lessEqual="<=" | greaterEqual=">=" | equal="=" | notEqual="!=" | like |
	//	notLike="not like" | notIn="not in" | in;
	public OperatorElements getOperatorAccess() {
		return (unknownRuleOperator != null) ? unknownRuleOperator : (unknownRuleOperator = new OperatorElements());
	}
	
	public EnumRule getOperatorRule() {
		return getOperatorAccess().getRule();
	}

	//terminal SINGED_LONG returns ecore::ELong:
	//	"-"? "0".."9"+;
	public TerminalRule getSINGED_LONGRule() {
		return (tSINGED_LONG != null) ? tSINGED_LONG : (tSINGED_LONG = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SINGED_LONG"));
	} 

	//terminal DATE returns ecore::EDate:
	//	"0".."9" "0".."9" "0".."9" "0".."9" "-" "0".."1" "0".."9" "-" "0".."3" "0".."9";
	public TerminalRule getDATERule() {
		return (tDATE != null) ? tDATE : (tDATE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DATE"));
	} 

	//terminal SIGNED_DOUBLE returns ecore::EDouble:
	//	"-"? "0".."9"+ ("." "0".."9"+)?;
	public TerminalRule getSIGNED_DOUBLERule() {
		return (tSIGNED_DOUBLE != null) ? tSIGNED_DOUBLE : (tSIGNED_DOUBLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SIGNED_DOUBLE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return (tID != null) ? tID : (tID = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ID"));
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" | "n" |
	//	"f" | "r" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return (tSTRING != null) ? tSTRING : (tSTRING = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "STRING"));
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return (tML_COMMENT != null) ? tML_COMMENT : (tML_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "ML_COMMENT"));
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return (tSL_COMMENT != null) ? tSL_COMMENT : (tSL_COMMENT = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "SL_COMMENT"));
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return (tWS != null) ? tWS : (tWS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "WS"));
	} 
}
