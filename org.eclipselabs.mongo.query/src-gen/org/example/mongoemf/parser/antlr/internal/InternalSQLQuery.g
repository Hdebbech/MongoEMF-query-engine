/*
* generated by Xtext
*/
grammar InternalSQLQuery;

options {
	superClass=AbstractInternalAntlrParser;
	
}

@lexer::header {
package org.example.mongoemf.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.example.mongoemf.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.example.mongoemf.services.SQLQueryGrammarAccess;

}

@parser::members {

 	private SQLQueryGrammarAccess grammarAccess;
 	
    public InternalSQLQueryParser(TokenStream input, SQLQueryGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }
    
    @Override
    protected String getFirstRuleName() {
    	return "Model";	
   	}
   	
   	@Override
   	protected SQLQueryGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}
}

@rulecatch { 
    catch (RecognitionException re) { 
        recover(input,re); 
        appendSkippedTokens();
    } 
}




// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	 iv_ruleModel=ruleModel 
	 { $current=$iv_ruleModel.current; } 
	 EOF 
;

// Rule Model
ruleModel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='SELECT' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getModelAccess().getSELECTKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getAttrsColumnListParserRuleCall_1_0()); 
	    }
		lv_attrs_1_0=ruleColumnList		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"attrs",
        		lv_attrs_1_0, 
        		"ColumnList");
	        afterParserOrEnumRuleCall();
	    }

)
)	otherlv_2='FROM' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getModelAccess().getFROMKeyword_2());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getDbDatabaseParserRuleCall_3_0()); 
	    }
		lv_db_3_0=ruleDatabase		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"db",
        		lv_db_3_0, 
        		"Database");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getModelAccess().getQueryQueryConditionParserRuleCall_4_0()); 
	    }
		lv_query_4_0=ruleQueryCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getModelRule());
	        }
       		set(
       			$current, 
       			"query",
        		lv_query_4_0, 
        		"QueryCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)?)
;





// Entry rule entryRuleDatabase
entryRuleDatabase returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getDatabaseRule()); }
	 iv_ruleDatabase=ruleDatabase 
	 { $current=$iv_ruleDatabase.current; } 
	 EOF 
;

// Rule Database
ruleDatabase returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='mongo://' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getDatabaseAccess().getMongoKeyword_0());
    }
(
(
		lv_url_1_0=RULE_ID
		{
			newLeafNode(lv_url_1_0, grammarAccess.getDatabaseAccess().getUrlIDTerminalRuleCall_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"url",
        		lv_url_1_0, 
        		"ID");
	    }

)
)(	otherlv_2=':' 
    {
    	newLeafNode(otherlv_2, grammarAccess.getDatabaseAccess().getColonKeyword_2_0());
    }
(
(
		lv_port_3_0=RULE_INT
		{
			newLeafNode(lv_port_3_0, grammarAccess.getDatabaseAccess().getPortINTTerminalRuleCall_2_1_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"port",
        		lv_port_3_0, 
        		"INT");
	    }

)
))?	otherlv_4='/' 
    {
    	newLeafNode(otherlv_4, grammarAccess.getDatabaseAccess().getSolidusKeyword_3());
    }
(
(
		lv_dbName_5_0=RULE_ID
		{
			newLeafNode(lv_dbName_5_0, grammarAccess.getDatabaseAccess().getDbNameIDTerminalRuleCall_4_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"dbName",
        		lv_dbName_5_0, 
        		"ID");
	    }

)
)	otherlv_6='/' 
    {
    	newLeafNode(otherlv_6, grammarAccess.getDatabaseAccess().getSolidusKeyword_5());
    }
(
(
		lv_name_7_0=RULE_ID
		{
			newLeafNode(lv_name_7_0, grammarAccess.getDatabaseAccess().getNameIDTerminalRuleCall_6_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getDatabaseRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_7_0, 
        		"ID");
	    }

)
))
;





// Entry rule entryRuleColumnList
entryRuleColumnList returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getColumnListRule()); } 
	 iv_ruleColumnList=ruleColumnList 
	 { $current=$iv_ruleColumnList.current.getText(); }  
	 EOF 
;

// Rule ColumnList
ruleColumnList returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getColumnListAccess().getIDTerminalRuleCall_0_0()); 
    }
(
	kw=',' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColumnListAccess().getCommaKeyword_0_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getColumnListAccess().getIDTerminalRuleCall_0_1_1()); 
    }
)*)
    |
	kw='*' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getColumnListAccess().getAsteriskKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleQueryCondition
entryRuleQueryCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getQueryConditionRule()); }
	 iv_ruleQueryCondition=ruleQueryCondition 
	 { $current=$iv_ruleQueryCondition.current; } 
	 EOF 
;

// Rule QueryCondition
ruleQueryCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(	otherlv_0='WHERE' 
    {
    	newLeafNode(otherlv_0, grammarAccess.getQueryConditionAccess().getWHEREKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryConditionAccess().getStartcondConditionParserRuleCall_1_0()); 
	    }
		lv_startcond_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryConditionRule());
	        }
       		set(
       			$current, 
       			"startcond",
        		lv_startcond_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQueryConditionAccess().getFollowcondFollowConditionParserRuleCall_2_0()); 
	    }
		lv_followcond_2_0=ruleFollowCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQueryConditionRule());
	        }
       		add(
       			$current, 
       			"followcond",
        		lv_followcond_2_0, 
        		"FollowCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)*)
;





// Entry rule entryRuleFollowCondition
entryRuleFollowCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getFollowConditionRule()); }
	 iv_ruleFollowCondition=ruleFollowCondition 
	 { $current=$iv_ruleFollowCondition.current; } 
	 EOF 
;

// Rule FollowCondition
ruleFollowCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getFollowConditionAccess().getConjunctionConjunctionParserRuleCall_0_0()); 
	    }
		lv_conjunction_0_0=ruleConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFollowConditionRule());
	        }
       		set(
       			$current, 
       			"conjunction",
        		lv_conjunction_0_0, 
        		"Conjunction");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFollowConditionAccess().getCondConditionParserRuleCall_1_0()); 
	    }
		lv_cond_1_0=ruleCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFollowConditionRule());
	        }
       		set(
       			$current, 
       			"cond",
        		lv_cond_1_0, 
        		"Condition");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleCondition
entryRuleCondition returns [EObject current=null] 
	:
	{ newCompositeNode(grammarAccess.getConditionRule()); }
	 iv_ruleCondition=ruleCondition 
	 { $current=$iv_ruleCondition.current; } 
	 EOF 
;

// Rule Condition
ruleCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getConditionAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getConditionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getCompCOMPAREParserRuleCall_1_0()); 
	    }
		lv_comp_1_0=ruleCOMPARE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"comp",
        		lv_comp_1_0, 
        		"COMPARE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getConditionAccess().getValueVALUEParserRuleCall_2_0()); 
	    }
		lv_value_2_0=ruleVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getConditionRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_2_0, 
        		"VALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleConjunction
entryRuleConjunction returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getConjunctionRule()); } 
	 iv_ruleConjunction=ruleConjunction 
	 { $current=$iv_ruleConjunction.current.getText(); }  
	 EOF 
;

// Rule Conjunction
ruleConjunction returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	kw='AND' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConjunctionAccess().getANDKeyword_0()); 
    }

    |
	kw='OR' 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getConjunctionAccess().getORKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleCOMPARE
entryRuleCOMPARE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getCOMPARERule()); } 
	 iv_ruleCOMPARE=ruleCOMPARE 
	 { $current=$iv_ruleCOMPARE.current.getText(); }  
	 EOF 
;

// Rule COMPARE
ruleCOMPARE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_EQUALS_0=RULE_EQUALS    {
		$current.merge(this_EQUALS_0);
    }

    { 
    newLeafNode(this_EQUALS_0, grammarAccess.getCOMPAREAccess().getEQUALSTerminalRuleCall_0()); 
    }

    |    this_NOT_EQUALS_1=RULE_NOT_EQUALS    {
		$current.merge(this_NOT_EQUALS_1);
    }

    { 
    newLeafNode(this_NOT_EQUALS_1, grammarAccess.getCOMPAREAccess().getNOT_EQUALSTerminalRuleCall_1()); 
    }

    |    this_LESS_THAN_2=RULE_LESS_THAN    {
		$current.merge(this_LESS_THAN_2);
    }

    { 
    newLeafNode(this_LESS_THAN_2, grammarAccess.getCOMPAREAccess().getLESS_THANTerminalRuleCall_2()); 
    }

    |    this_MORE_THAN_3=RULE_MORE_THAN    {
		$current.merge(this_MORE_THAN_3);
    }

    { 
    newLeafNode(this_MORE_THAN_3, grammarAccess.getCOMPAREAccess().getMORE_THANTerminalRuleCall_3()); 
    }

    |    this_LESS_EQUAL_4=RULE_LESS_EQUAL    {
		$current.merge(this_LESS_EQUAL_4);
    }

    { 
    newLeafNode(this_LESS_EQUAL_4, grammarAccess.getCOMPAREAccess().getLESS_EQUALTerminalRuleCall_4()); 
    }

    |    this_MORE_EQUAL_5=RULE_MORE_EQUAL    {
		$current.merge(this_MORE_EQUAL_5);
    }

    { 
    newLeafNode(this_MORE_EQUAL_5, grammarAccess.getCOMPAREAccess().getMORE_EQUALTerminalRuleCall_5()); 
    }

    |    this_LIKE_6=RULE_LIKE    {
		$current.merge(this_LIKE_6);
    }

    { 
    newLeafNode(this_LIKE_6, grammarAccess.getCOMPAREAccess().getLIKETerminalRuleCall_6()); 
    }
)
    ;





// Entry rule entryRuleVALUE
entryRuleVALUE returns [String current=null] 
	:
	{ newCompositeNode(grammarAccess.getVALUERule()); } 
	 iv_ruleVALUE=ruleVALUE 
	 { $current=$iv_ruleVALUE.current.getText(); }  
	 EOF 
;

// Rule VALUE
ruleVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(    this_INT_0=RULE_INT    {
		$current.merge(this_INT_0);
    }

    { 
    newLeafNode(this_INT_0, grammarAccess.getVALUEAccess().getINTTerminalRuleCall_0()); 
    }

    |    this_STRING_1=RULE_STRING    {
		$current.merge(this_STRING_1);
    }

    { 
    newLeafNode(this_STRING_1, grammarAccess.getVALUEAccess().getSTRINGTerminalRuleCall_1()); 
    }
)
    ;





RULE_EQUALS : '=';

RULE_NOT_EQUALS : ('!='|'<>');

RULE_LESS_THAN : '<';

RULE_LESS_EQUAL : '<=';

RULE_MORE_EQUAL : '>=';

RULE_MORE_THAN : '>';

RULE_LIKE : 'LIKE';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


