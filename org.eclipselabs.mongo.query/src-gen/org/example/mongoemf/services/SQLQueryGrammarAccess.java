/*
* generated by Xtext
*/

package org.example.mongoemf.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class SQLQueryGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSELECTKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cAttrsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cAttrsColumnListParserRuleCall_1_0 = (RuleCall)cAttrsAssignment_1.eContents().get(0);
		private final Keyword cFROMKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDbAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cDbDatabaseParserRuleCall_3_0 = (RuleCall)cDbAssignment_3.eContents().get(0);
		private final Assignment cQueryAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cQueryQueryConditionParserRuleCall_4_0 = (RuleCall)cQueryAssignment_4.eContents().get(0);
		
		//Model:
		//	"SELECT" attrs=ColumnList "FROM" db=Database query=QueryCondition?;
		public ParserRule getRule() { return rule; }

		//"SELECT" attrs=ColumnList "FROM" db=Database query=QueryCondition?
		public Group getGroup() { return cGroup; }

		//"SELECT"
		public Keyword getSELECTKeyword_0() { return cSELECTKeyword_0; }

		//attrs=ColumnList
		public Assignment getAttrsAssignment_1() { return cAttrsAssignment_1; }

		//ColumnList
		public RuleCall getAttrsColumnListParserRuleCall_1_0() { return cAttrsColumnListParserRuleCall_1_0; }

		//"FROM"
		public Keyword getFROMKeyword_2() { return cFROMKeyword_2; }

		//db=Database
		public Assignment getDbAssignment_3() { return cDbAssignment_3; }

		//Database
		public RuleCall getDbDatabaseParserRuleCall_3_0() { return cDbDatabaseParserRuleCall_3_0; }

		//query=QueryCondition?
		public Assignment getQueryAssignment_4() { return cQueryAssignment_4; }

		//QueryCondition
		public RuleCall getQueryQueryConditionParserRuleCall_4_0() { return cQueryQueryConditionParserRuleCall_4_0; }
	}

	public class DatabaseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Database");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cMongoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cUrlAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cUrlIDTerminalRuleCall_1_0 = (RuleCall)cUrlAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPortAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPortINTTerminalRuleCall_2_1_0 = (RuleCall)cPortAssignment_2_1.eContents().get(0);
		private final Keyword cSolidusKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDbNameAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDbNameIDTerminalRuleCall_4_0 = (RuleCall)cDbNameAssignment_4.eContents().get(0);
		private final Keyword cSolidusKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cNameAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cNameIDTerminalRuleCall_6_0 = (RuleCall)cNameAssignment_6.eContents().get(0);
		
		//Database:
		//	"mongo://" url=ID (":" port=INT)? "/" dbName=ID "/" name=ID;
		public ParserRule getRule() { return rule; }

		//"mongo://" url=ID (":" port=INT)? "/" dbName=ID "/" name=ID
		public Group getGroup() { return cGroup; }

		//"mongo://"
		public Keyword getMongoKeyword_0() { return cMongoKeyword_0; }

		//url=ID
		public Assignment getUrlAssignment_1() { return cUrlAssignment_1; }

		//ID
		public RuleCall getUrlIDTerminalRuleCall_1_0() { return cUrlIDTerminalRuleCall_1_0; }

		//(":" port=INT)?
		public Group getGroup_2() { return cGroup_2; }

		//":"
		public Keyword getColonKeyword_2_0() { return cColonKeyword_2_0; }

		//port=INT
		public Assignment getPortAssignment_2_1() { return cPortAssignment_2_1; }

		//INT
		public RuleCall getPortINTTerminalRuleCall_2_1_0() { return cPortINTTerminalRuleCall_2_1_0; }

		//"/"
		public Keyword getSolidusKeyword_3() { return cSolidusKeyword_3; }

		//dbName=ID
		public Assignment getDbNameAssignment_4() { return cDbNameAssignment_4; }

		//ID
		public RuleCall getDbNameIDTerminalRuleCall_4_0() { return cDbNameIDTerminalRuleCall_4_0; }

		//"/"
		public Keyword getSolidusKeyword_5() { return cSolidusKeyword_5; }

		//name=ID
		public Assignment getNameAssignment_6() { return cNameAssignment_6; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_6_0() { return cNameIDTerminalRuleCall_6_0; }
	}

	public class ColumnListElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ColumnList");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cCommaKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_1_1 = (RuleCall)cGroup_0_1.eContents().get(1);
		private final Keyword cAsteriskKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//ColumnList:
		//	ID ("," ID)* | "*";
		public ParserRule getRule() { return rule; }

		//ID ("," ID)* | "*"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ID ("," ID)*
		public Group getGroup_0() { return cGroup_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_0() { return cIDTerminalRuleCall_0_0; }

		//("," ID)*
		public Group getGroup_0_1() { return cGroup_0_1; }

		//","
		public Keyword getCommaKeyword_0_1_0() { return cCommaKeyword_0_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_0_1_1() { return cIDTerminalRuleCall_0_1_1; }

		//"*"
		public Keyword getAsteriskKeyword_1() { return cAsteriskKeyword_1; }
	}

	public class QueryConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QueryCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWHEREKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStartcondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStartcondConditionParserRuleCall_1_0 = (RuleCall)cStartcondAssignment_1.eContents().get(0);
		private final Assignment cFollowcondAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cFollowcondFollowConditionParserRuleCall_2_0 = (RuleCall)cFollowcondAssignment_2.eContents().get(0);
		
		//QueryCondition:
		//	"WHERE" startcond=Condition followcond+=FollowCondition*;
		public ParserRule getRule() { return rule; }

		//"WHERE" startcond=Condition followcond+=FollowCondition*
		public Group getGroup() { return cGroup; }

		//"WHERE"
		public Keyword getWHEREKeyword_0() { return cWHEREKeyword_0; }

		//startcond=Condition
		public Assignment getStartcondAssignment_1() { return cStartcondAssignment_1; }

		//Condition
		public RuleCall getStartcondConditionParserRuleCall_1_0() { return cStartcondConditionParserRuleCall_1_0; }

		//followcond+=FollowCondition*
		public Assignment getFollowcondAssignment_2() { return cFollowcondAssignment_2; }

		//FollowCondition
		public RuleCall getFollowcondFollowConditionParserRuleCall_2_0() { return cFollowcondFollowConditionParserRuleCall_2_0; }
	}

	public class FollowConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FollowCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConjunctionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConjunctionConjunctionParserRuleCall_0_0 = (RuleCall)cConjunctionAssignment_0.eContents().get(0);
		private final Assignment cCondAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCondConditionParserRuleCall_1_0 = (RuleCall)cCondAssignment_1.eContents().get(0);
		
		//FollowCondition:
		//	conjunction=Conjunction cond=Condition;
		public ParserRule getRule() { return rule; }

		//conjunction=Conjunction cond=Condition
		public Group getGroup() { return cGroup; }

		//conjunction=Conjunction
		public Assignment getConjunctionAssignment_0() { return cConjunctionAssignment_0; }

		//Conjunction
		public RuleCall getConjunctionConjunctionParserRuleCall_0_0() { return cConjunctionConjunctionParserRuleCall_0_0; }

		//cond=Condition
		public Assignment getCondAssignment_1() { return cCondAssignment_1; }

		//Condition
		public RuleCall getCondConditionParserRuleCall_1_0() { return cCondConditionParserRuleCall_1_0; }
	}

	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Condition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Assignment cCompAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCompCOMPAREParserRuleCall_1_0 = (RuleCall)cCompAssignment_1.eContents().get(0);
		private final Assignment cValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cValueVALUEParserRuleCall_2_0 = (RuleCall)cValueAssignment_2.eContents().get(0);
		
		//Condition:
		//	name=ID comp=COMPARE value=VALUE;
		public ParserRule getRule() { return rule; }

		//name=ID comp=COMPARE value=VALUE
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//comp=COMPARE
		public Assignment getCompAssignment_1() { return cCompAssignment_1; }

		//COMPARE
		public RuleCall getCompCOMPAREParserRuleCall_1_0() { return cCompCOMPAREParserRuleCall_1_0; }

		//value=VALUE
		public Assignment getValueAssignment_2() { return cValueAssignment_2; }

		//VALUE
		public RuleCall getValueVALUEParserRuleCall_2_0() { return cValueVALUEParserRuleCall_2_0; }
	}

	public class ConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Conjunction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cANDKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cORKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Conjunction:
		//	"AND" | "OR";
		public ParserRule getRule() { return rule; }

		//"AND" | "OR"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"AND"
		public Keyword getANDKeyword_0() { return cANDKeyword_0; }

		//"OR"
		public Keyword getORKeyword_1() { return cORKeyword_1; }
	}

	public class COMPAREElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "COMPARE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cEQUALSTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cNOT_EQUALSTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cLESS_THANTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cMORE_THANTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cLESS_EQUALTerminalRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cMORE_EQUALTerminalRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		private final RuleCall cLIKETerminalRuleCall_6 = (RuleCall)cAlternatives.eContents().get(6);
		
		//COMPARE:
		//	EQUALS | NOT_EQUALS | LESS_THAN | MORE_THAN | LESS_EQUAL | MORE_EQUAL | LIKE;
		public ParserRule getRule() { return rule; }

		//EQUALS | NOT_EQUALS | LESS_THAN | MORE_THAN | LESS_EQUAL | MORE_EQUAL | LIKE
		public Alternatives getAlternatives() { return cAlternatives; }

		//EQUALS
		public RuleCall getEQUALSTerminalRuleCall_0() { return cEQUALSTerminalRuleCall_0; }

		//NOT_EQUALS
		public RuleCall getNOT_EQUALSTerminalRuleCall_1() { return cNOT_EQUALSTerminalRuleCall_1; }

		//LESS_THAN
		public RuleCall getLESS_THANTerminalRuleCall_2() { return cLESS_THANTerminalRuleCall_2; }

		//MORE_THAN
		public RuleCall getMORE_THANTerminalRuleCall_3() { return cMORE_THANTerminalRuleCall_3; }

		//LESS_EQUAL
		public RuleCall getLESS_EQUALTerminalRuleCall_4() { return cLESS_EQUALTerminalRuleCall_4; }

		//MORE_EQUAL
		public RuleCall getMORE_EQUALTerminalRuleCall_5() { return cMORE_EQUALTerminalRuleCall_5; }

		//LIKE
		public RuleCall getLIKETerminalRuleCall_6() { return cLIKETerminalRuleCall_6; }
	}

	public class VALUEElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "VALUE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSTRINGTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//VALUE:
		//	INT | STRING;
		public ParserRule getRule() { return rule; }

		//INT | STRING
		public Alternatives getAlternatives() { return cAlternatives; }

		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }

		//STRING
		public RuleCall getSTRINGTerminalRuleCall_1() { return cSTRINGTerminalRuleCall_1; }
	}
	
	
	private ModelElements pModel;
	private DatabaseElements pDatabase;
	private ColumnListElements pColumnList;
	private QueryConditionElements pQueryCondition;
	private FollowConditionElements pFollowCondition;
	private ConditionElements pCondition;
	private ConjunctionElements pConjunction;
	private COMPAREElements pCOMPARE;
	private VALUEElements pVALUE;
	private TerminalRule tEQUALS;
	private TerminalRule tNOT_EQUALS;
	private TerminalRule tLESS_THAN;
	private TerminalRule tLESS_EQUAL;
	private TerminalRule tMORE_EQUAL;
	private TerminalRule tMORE_THAN;
	private TerminalRule tLIKE;
	
	private final GrammarProvider grammarProvider;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public SQLQueryGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammarProvider = grammarProvider;
		this.gaTerminals = gaTerminals;
	}
	
	public Grammar getGrammar() {	
		return grammarProvider.getGrammar(this);
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	"SELECT" attrs=ColumnList "FROM" db=Database query=QueryCondition?;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Database:
	//	"mongo://" url=ID (":" port=INT)? "/" dbName=ID "/" name=ID;
	public DatabaseElements getDatabaseAccess() {
		return (pDatabase != null) ? pDatabase : (pDatabase = new DatabaseElements());
	}
	
	public ParserRule getDatabaseRule() {
		return getDatabaseAccess().getRule();
	}

	//ColumnList:
	//	ID ("," ID)* | "*";
	public ColumnListElements getColumnListAccess() {
		return (pColumnList != null) ? pColumnList : (pColumnList = new ColumnListElements());
	}
	
	public ParserRule getColumnListRule() {
		return getColumnListAccess().getRule();
	}

	//QueryCondition:
	//	"WHERE" startcond=Condition followcond+=FollowCondition*;
	public QueryConditionElements getQueryConditionAccess() {
		return (pQueryCondition != null) ? pQueryCondition : (pQueryCondition = new QueryConditionElements());
	}
	
	public ParserRule getQueryConditionRule() {
		return getQueryConditionAccess().getRule();
	}

	//FollowCondition:
	//	conjunction=Conjunction cond=Condition;
	public FollowConditionElements getFollowConditionAccess() {
		return (pFollowCondition != null) ? pFollowCondition : (pFollowCondition = new FollowConditionElements());
	}
	
	public ParserRule getFollowConditionRule() {
		return getFollowConditionAccess().getRule();
	}

	//Condition:
	//	name=ID comp=COMPARE value=VALUE;
	public ConditionElements getConditionAccess() {
		return (pCondition != null) ? pCondition : (pCondition = new ConditionElements());
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}

	//Conjunction:
	//	"AND" | "OR";
	public ConjunctionElements getConjunctionAccess() {
		return (pConjunction != null) ? pConjunction : (pConjunction = new ConjunctionElements());
	}
	
	public ParserRule getConjunctionRule() {
		return getConjunctionAccess().getRule();
	}

	//COMPARE:
	//	EQUALS | NOT_EQUALS | LESS_THAN | MORE_THAN | LESS_EQUAL | MORE_EQUAL | LIKE;
	public COMPAREElements getCOMPAREAccess() {
		return (pCOMPARE != null) ? pCOMPARE : (pCOMPARE = new COMPAREElements());
	}
	
	public ParserRule getCOMPARERule() {
		return getCOMPAREAccess().getRule();
	}

	//VALUE:
	//	INT | STRING;
	public VALUEElements getVALUEAccess() {
		return (pVALUE != null) ? pVALUE : (pVALUE = new VALUEElements());
	}
	
	public ParserRule getVALUERule() {
		return getVALUEAccess().getRule();
	}

	//terminal EQUALS:
	//	"=";
	public TerminalRule getEQUALSRule() {
		return (tEQUALS != null) ? tEQUALS : (tEQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "EQUALS"));
	} 

	//terminal NOT_EQUALS:
	//	"!=" | "<>";
	public TerminalRule getNOT_EQUALSRule() {
		return (tNOT_EQUALS != null) ? tNOT_EQUALS : (tNOT_EQUALS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "NOT_EQUALS"));
	} 

	//terminal LESS_THAN:
	//	"<";
	public TerminalRule getLESS_THANRule() {
		return (tLESS_THAN != null) ? tLESS_THAN : (tLESS_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS_THAN"));
	} 

	//terminal LESS_EQUAL:
	//	"<=";
	public TerminalRule getLESS_EQUALRule() {
		return (tLESS_EQUAL != null) ? tLESS_EQUAL : (tLESS_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LESS_EQUAL"));
	} 

	//terminal MORE_EQUAL:
	//	">=";
	public TerminalRule getMORE_EQUALRule() {
		return (tMORE_EQUAL != null) ? tMORE_EQUAL : (tMORE_EQUAL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MORE_EQUAL"));
	} 

	//terminal MORE_THAN:
	//	">";
	public TerminalRule getMORE_THANRule() {
		return (tMORE_THAN != null) ? tMORE_THAN : (tMORE_THAN = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "MORE_THAN"));
	} 

	//terminal LIKE:
	//	"LIKE";
	public TerminalRule getLIKERule() {
		return (tLIKE != null) ? tLIKE : (tLIKE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "LIKE"));
	} 

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
